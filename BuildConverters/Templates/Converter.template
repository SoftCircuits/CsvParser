// Copyright (c) 2019 Jonathan Wood (www.softcircuits.com)
// Licensed under the MIT license.
//

This is the template file used to build all the DataConverter classes.
The main template is the body of each class. And then sections are
defined for various placeholders, types and modes.

Tag Meaning Examples:
{@ClassName} = "NullableBooleanArrayConverter"
{@BaseTypeName} = "Boolean"
{@BaseTypeCName} = "bool"
{@FullTypeName} = "Boolean?[]"
{@FullTypeCName} = "bool?[]"

=====================================================================
TEMPLATE BODY
=====================================================================

{@Template}// Copyright (c) 2019 Jonathan Wood (www.softcircuits.com)
// Licensed under the MIT license.
//
{@UsingBlock}
namespace SoftCircuits.CsvParser.Converters
{
    internal class {@ClassName} : DataConverter<{@FullTypeCName}>
    {
        {@ToString}

        {@FromString}
    }
}
{@EndTemplate}

=====================================================================
DEFAULT - STANDARD
=====================================================================

{@Section(Default,Standard,ToString)}public override string ConvertToString({@FullTypeCName} value) => value.ToString();{@EndSection}

{@Section(Default,Standard,FromString)}public override bool TryConvertFromString(string s, out {@BaseTypeCName} value) => {@BaseTypeCName}.TryParse(s, out value);{@EndSection}

{@Section(Default,Standard,UsingBlock)}{@EndSection}

=====================================================================
DEFAULT - NULLABLE
=====================================================================

{@Section(Default,Nullable,ToString)}public override string ConvertToString({@FullTypeCName} value) => value.HasValue ? value.Value.ToString() : string.Empty;{@EndSection}

{@Section(Default,Nullable,FromString)}public override bool TryConvertFromString(string s, out {@FullTypeCName} value)
        {
            value = null;

            if (string.IsNullOrWhiteSpace(s))
                return (s != null);

            if ({@BaseTypeCName}.TryParse(s, out {@BaseTypeCName} temp))
            {
                value = temp;
                return true;
            }
            return false;
        }{@EndSection}

{@Section(Default,Nullable,UsingBlock)}{@EndSection}

=====================================================================
DEFAULT - ARRAY
=====================================================================

{@Section(Default,Array,ToString)}public override string ConvertToString({@FullTypeCName} array)
        {
            if (array == null || array.Length == 0)
                return string.Empty;

            return string.Join(";", array);
        }{@EndSection}

{@Section(Default,Array,FromString)}public override bool TryConvertFromString(string s, out {@FullTypeCName} array)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(s))
                {
                    array = null;
                    return (s != null);
                }

                string[] tokens = s.Split(';');
                array = new {@BaseTypeCName}[tokens.Length];
                for (int i = 0; i < tokens.Length; i++)
                    array[i] = {@BaseTypeCName}.Parse(tokens[i]);
                return true;
            }
            catch (Exception)
            {
                array = null;
                return false;
            }
        }{@EndSection}

{@Section(Default,Array,UsingBlock)}using System;
{@EndSection}

=====================================================================
DEFAULT - NULLABLE, ARRAY
=====================================================================

{@Section(Default,NullableArray,ToString)}public override string ConvertToString({@FullTypeCName} array)
        {
            if (array == null || array.Length == 0)
                return string.Empty;

            return string.Join(";", array.Select(v => v.HasValue ? v.Value.ToString() : string.Empty));
        }{@EndSection}

{@Section(Default,NullableArray,FromString)}public override bool TryConvertFromString(string s, out {@FullTypeCName} array)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(s))
                {
                    array = null;
                    return (s != null);
                }

                string[] tokens = s.Split(';');
                array = new {@BaseTypeCName}?[tokens.Length];
                for (int i = 0; i < tokens.Length; i++)
                    array[i] = (tokens[i].Length > 0) ? ({@BaseTypeCName}?){@BaseTypeCName}.Parse(tokens[i]) : null;
                return true;
            }
            catch (Exception)
            {
                array = null;
                return false;
            }
        }{@EndSection}

{@Section(Default,NullableArray,UsingBlock)}using System;
using System.Linq;
{@EndSection}

=====================================================================
STRING - STANDARD
=====================================================================

{@Section(String,Standard,ToString)}public override string ConvertToString({@FullTypeCName} value) => value ?? string.Empty;{@EndSection}

{@Section(String,Standard,FromString)}public override bool TryConvertFromString(string s, out {@FullTypeCName} value)
        {
            value = s;
            return (value != null);
        }{@EndSection}

{@Section(String,Standard,UsingBlock)}using System;
{@EndSection}

=====================================================================
STRING - ARRAY
=====================================================================

{@Section(String,Array,ToString)}public override string ConvertToString({@FullTypeCName} array)
        {
            if (array == null || array.Length == 0)
                return string.Empty;

            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < array.Length; i++)
            {
                if (i > 0)
                    builder.Append(';');
                if (array[i].IndexOfAny(new[] { ';', '"', '\r', '\n' }) >= 0)
                    builder.Append($"\"{array[i].Replace("\"", "\"\"")}\"");
                else
                    builder.Append(array[i]);
            }
            return builder.ToString();
        }{@EndSection}

{@Section(String,Array,FromString)}public override bool TryConvertFromString(string s, out {@FullTypeCName} array)
        {
            if (s == null)
            {
                array = null;
                return false;
            }

            List<string> list = new List<string>();
            int pos = 0;

            while (pos < s.Length)
            {
                if (s[pos] == '"')
                {
                    // Parse quoted value
                    StringBuilder builder = new StringBuilder();
                    // Skip starting quote
                    pos++;
                    while (pos < s.Length)
                    {
                        if (s[pos] == '"')
                        {
                            // Skip quote
                            pos++;
                            // One quote signifies end of value
                            // Two quote signifies single quote literal
                            if (pos >= s.Length || s[pos] != '"')
                                break;
                        }
                        builder.Append(s[pos++]);
                    }
                    list.Add(builder.ToString());
                    // Skip past next delimiter
                    pos = s.IndexOf(';', pos);
                    if (pos == -1)
                        pos = s.Length;
                    pos++;
                }
                else
                {
                    // Parse value
                    int start = pos;
                    pos = s.IndexOf(';', pos);
                    if (pos == -1)
                        pos = s.Length;
                    list.Add(s.Substring(start, pos - start));
                    // Skip delimiter
                    pos++;
                }
            }
            array = list.ToArray();
            return true;
        }{@EndSection}

{@Section(String,Array,UsingBlock)}using System.Collections.Generic;
using System.Text;
{@EndSection}

=====================================================================
CHAR - NULLABLE
=====================================================================

{@Section(Char,Nullable,FromString)}public override bool TryConvertFromString(string s, out char? value)
        {
            value = null;

            if (string.IsNullOrEmpty(s))
                return (s != null);

            if (s.Length != 1)
                return false;

            value = s[0];
            return true;
        }{@EndSection}

=====================================================================
CHAR - ARRAY
=====================================================================

{@Section(Char,Array,ToString)}public override string ConvertToString(char[] array) => (array != null) ? new string(array) : string.Empty;{@EndSection}

{@Section(Char,Array,FromString)}public override bool TryConvertFromString(string s, out char[] array)
        {
            if (s == null || s.Length == 0)
            {
                array = null;
                return (s != null);
            }
            array = s.ToCharArray();
            return true;
        }{@EndSection}

{@Section(Char,Array,UsingBlock)}{@EndSection}

=====================================================================
CHAR - NULLABLE, ARRAY
=====================================================================

{@Section(Char,NullableArray,ToString)}public override string ConvertToString({@FullTypeCName} array)
        {
            if (array == null || array.Length == 0)
                return string.Empty;

            return string.Join(";", array.Select(c => c.HasValue ? ((int)c).ToString() : string.Empty));
        }{@EndSection}

{@Section(Char,NullableArray,FromString)}public override bool TryConvertFromString(string s, out {@FullTypeCName} array)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(s))
                {
                    array = null;
                    return (s != null);
                }

                string[] tokens = s.Split(';');
                array = new {@BaseTypeCName}?[tokens.Length];
                for (int i = 0; i < tokens.Length; i++)
                    array[i] = (tokens[i].Length > 0) ? ({@BaseTypeCName}?)int.Parse(tokens[i]) : null;
                return true;
            }
            catch (Exception)
            {
                array = null;
                return false;
            }
        }{@EndSection}

{@Section(Char,NullableArray,UsingBlock)}using System;
using System.Linq;
{@EndSection}

=====================================================================
GUID
=====================================================================

{@Section(Guid,Standard,UsingBlock)}using System;
{@EndSection}

{@Section(Guid,Nullable,UsingBlock)}using System;
{@EndSection}

=====================================================================
DATETIME - STANDARD
=====================================================================

{@Section(DateTime,Standard,ToString)}public override string ConvertToString({@FullTypeCName} value) => value.ToString();{@EndSection}

{@Section(DateTime,Standard,FromString)}public override bool TryConvertFromString(string s, out {@FullTypeCName} value)
        {
            return {@BaseTypeCName}.TryParse(s, CultureInfo.InvariantCulture, DateTimeStyles.None, out value);
        }{@EndSection}
        
{@Section(DateTime,Standard,UsingBlock)}using System;
using System.Globalization;
{@EndSection}

=====================================================================
DATETIME - NULLABLE
=====================================================================

{@Section(DateTime,Nullable,ToString)}public override string ConvertToString({@FullTypeCName} value) => value.HasValue ? value.Value.ToString() : string.Empty;{@EndSection}

{@Section(DateTime,Nullable,FromString)}public override bool TryConvertFromString(string s, out {@FullTypeCName} value)
        {
            value = null;

            if (string.IsNullOrWhiteSpace(s))
                return (s != null);
            
            if ({@BaseTypeCName}.TryParse(s, CultureInfo.InvariantCulture, DateTimeStyles.None, out {@BaseTypeCName} temp))
            {
                value = temp;
                return true;
            }
            return false;
        }{@EndSection}

{@Section(DateTime,Nullable,UsingBlock)}using System;
using System.Globalization;
{@EndSection}

=====================================================================
DATETIME - ARRAY
=====================================================================

{@Section(DateTime,Array,ToString)}public override string ConvertToString({@FullTypeCName} array)
        {
            if (array == null || array.Length == 0)
                return string.Empty;

            return string.Join(";", array);
        }{@EndSection}

{@Section(DateTime,Array,FromString)}public override bool TryConvertFromString(string s, out {@FullTypeCName} array)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(s))
                {
                    array = null;
                    return (s != null);
                }

                string[] tokens = s.Split(';');
                array = new {@BaseTypeCName}[tokens.Length];
                for (int i = 0; i < tokens.Length; i++)
                    array[i] = {@BaseTypeCName}.Parse(tokens[i], CultureInfo.InvariantCulture);
                return true;
            }
            catch (Exception)
            {
                array = null;
                return false;
            }
        }{@EndSection}

{@Section(DateTime,Array,UsingBlock)}using System;
using System.Globalization;
{@EndSection}

=====================================================================
DATETIME - NULLABLE, ARRAY
=====================================================================

{@Section(DateTime,NullableArray,ToString)}public override string ConvertToString({@FullTypeCName} array)
        {
            if (array == null || array.Length == 0)
                return string.Empty;

            return string.Join(";", array.Select(v => v.HasValue ? v.Value.ToString() : string.Empty));
        }{@EndSection}

{@Section(DateTime,NullableArray,FromString)}public override bool TryConvertFromString(string s, out {@FullTypeCName} array)
        {
            try
            {
                if (string.IsNullOrWhiteSpace(s))
                {
                    array = null;
                    return (s != null);
                }

                string[] tokens = s.Split(';');
                array = new {@BaseTypeCName}?[tokens.Length];
                for (int i = 0; i < tokens.Length; i++)
                    array[i] = (tokens[i].Length > 0) ? ({@BaseTypeCName}?){@BaseTypeCName}.Parse(tokens[i], CultureInfo.InvariantCulture) : null;
                return true;
            }
            catch (Exception)
            {
                array = null;
                return false;
            }
        }{@EndSection}

{@Section(DateTime,NullableArray,UsingBlock)}using System;
using System.Globalization;
using System.Linq;
{@EndSection}
